<?php

declare(strict_types=1);
namespace Losingbattle\MicroBase\Rewrite;

use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Monolog\LogRecord;
use Monolog\Utils;

class SizeFileHandler extends StreamHandler
{
    protected $stream;

    protected $fileSize;

    protected $mustRotate;

    public function __construct(string $filename, $level = Logger::DEBUG, int $fileSize = 1024 * 1024 * 50, bool $bubble = true, ?int $filePermission = null, bool $useLocking = false)
    {
        $this->url = Utils::canonicalizePath($filename);
        $this->fileSize = $fileSize;

        parent::__construct($this->url, $level, $bubble, $filePermission, $useLocking);
    }

    public function reset(): void
    {
        parent::reset(); // TODO: Change the autogenerated stub

        if ($this->mustRotate === true) {
            $this->rotate();
        }
    }

    public function close(): void
    {
        parent::close();

        if ($this->mustRotate === true) {
            $this->rotate();
        }
    }

    public function write(LogRecord $record): void
    {
        // on the first record written, if the log is new, we should rotate (once per day)
        if ($this->mustRotate === null) {
            $this->mustRotate = ! file_exists($this->url);
        }
        if (\is_resource($this->stream)) {
            if (fstat($this->stream)['size'] > $this->fileSize) {
                $this->mustRotate = true;
                $this->rotate();
            }
        }

        parent::write($record); // TODO: Change the autogenerated stub
    }

    public function rotate(): void
    {
        ftruncate($this->stream, 0);
        rewind($this->stream);
    }
}
